// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Char(36)
  name String @db.VarChar(100)
  email String @unique @db.VarChar(100)
  password String @db.Char(60)
  userType UserType @relation(fields: [userTypeId], references: [id])
  userTypeId String @db.Char(36)
  points Int @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  completedUnits CompletedUnit[]

  @@map("users")
}

model UserType {
  id String @id @default(uuid()) @db.Char(36)
  label String @db.VarChar(10)
  
  users User[]

  @@map("user_types")
}

model Unit{
  id String @id @default(uuid()) @db.Char(36)
  title String @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  completedUnit CompletedUnit[]

  @@map("units")
}

model CompletedUnit {
  id String @id @default(uuid()) @db.Char(36)
  completed Boolean @default(false)
  completedAt DateTime @default(now()) @map("completed_at")
  unit Unit @relation(fields: [unitId], references: [id])
  unitId String @db.Char(36)
  user User @relation(fields: [userId], references: [id])
  userId String @db.Char(36)

  @@map("completed_units")
}
